#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rearend:server');
var http = require('http');

// io.getSocketio(server);
// var io = require('../routes/socketio.js');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io').listen(server);
// io.on('connection', function(socket){
//   console.log('a user connected234');
//   socket.emit('join', {username: 'ppp'});
//   socket.on('disconnect', function(){
//     console.log('user disconnected');
//   });
//   socket.on('join', ({ username, room }, callback) => {
//     console.log(username);
//     console.log('???')
//   });
// })
var allClients = [];
io.sockets.on('connection', function(socket) {
   console.log('connect');
   allClients.push(socket);
   socket.on('NewPlayer', function(data1) {
      // online = online + 1;
      console.log('Online players : ');
      console.log('New player connected : ');
      // Players[data1] = data1;
      // console.log(Players);
  });
   socket.on('disconnect', function() {
      console.log('Got disconnect!');
      // var i = allClients.indexOf(socket);
      // allClients.splice(i, 1);
   });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
