#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rearend:server');
var http = require('http');

// 设置全局变量
global.doc_online=[];

// io.getSocketio(server);
// var io = require('../routes/socketio.js');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */
//创建http服务器
const server = require('http').Server(app);
//把socket io依附到对应创建的http服务器上
const io = require('socket.io')(server, { cors: true });
// 'Access-Control-Allow-Origin' :'*'
//监听设置，connection表示连接中
io.on('connection', (socket) => {
    //监听info客户的的info频道
    var u_id;
    socket.on('join',(data)=>{
      console.log('有用户上线了')
      if(global.doc_online.indexOf(data) == -1){//不重复添加用户信息
        global.doc_online.push(data);
        u_id=data; 
      }
      console.log(global.doc_online)
    })
    socket.on('info', (data) => { 
      socket.emit('users',global.doc_online)
    });
    socket.on('disconnect', () => {
      console.log('后端失去连接')
      global.doc_online.splice(global.doc_online.findIndex(e => e === u_name), 1) 
      console.log(global.doc_online)
    })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
